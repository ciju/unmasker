// Generated by CoffeeScript 1.6.2
(function() {
  var Dragging, Id, SelectionRect, Square, SquareGroups, doStuff, log, squares,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  log = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if ((typeof console !== "undefined" && console !== null ? console.log : void 0) != null) {
      return console.log.apply(console, args);
    }
  };

  $(function() {
    return doStuff();
  });

  SquareGroups = (function() {
    function SquareGroups() {
      this.squares = [];
    }

    SquareGroups.prototype.Push = function(s) {
      if (!s) {
        return;
      }
      log('pushing ', s.div[0]);
      return this.squares.push(s);
    };

    SquareGroups.prototype.ProcessColliding = function(s) {
      var i, _i, _len, _ref, _results;

      _ref = this.squares;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _results.push((function(i) {
          if (i.IsColliding(s) && i.Masking) {
            log('is colliding', s != null ? s.id : void 0, s);
            return log(i.SplitWith(s));
          }
        })(i));
      }
      return _results;
    };

    return SquareGroups;

  })();

  squares = new SquareGroups;

  Dragging = false;

  Id = 0;

  Square = (function() {
    function Square(x, y, w, h, Masking) {
      this.x = x;
      this.y = y;
      this.w = w;
      this.h = h;
      this.Masking = Masking != null ? Masking : true;
      this.StopDragging = __bind(this.StopDragging, this);
      this.RemoveSplits = __bind(this.RemoveSplits, this);
      this.RemoveOrig = __bind(this.RemoveOrig, this);
      this.updateIntersections = __bind(this.updateIntersections, this);
      this.rectSplits = __bind(this.rectSplits, this);
      this.intersectionPoints = __bind(this.intersectionPoints, this);
      this.intersectingRect = __bind(this.intersectingRect, this);
      this.updateDiv = __bind(this.updateDiv, this);
      if (this.w === 0 || this.h === 0) {
        return null;
      }
      this.div = $('<div class="mask">');
      this.splits = {};
      this.updateDiv();
      $('body').append(this.div);
      this.id = Id;
      Id += 1;
      this;
    }

    Square.prototype.updateDiv = function() {
      this.div.css({
        top: this.y + 'px',
        left: this.x + 'px',
        width: this.w + 'px',
        height: this.h + 'px'
      });
      return this.div.attr('data-id', this.id);
    };

    Square.prototype.Changing = function() {
      return [false, false, true, true];
    };

    Square.prototype.IsColliding = function(s) {
      var h, w, x, y, _ref;

      _ref = s.normalizedBoundary(), x = _ref.x, y = _ref.y, w = _ref.w, h = _ref.h;
      return !(this.x + this.w <= x || this.x >= x + w || this.y + this.h <= y || this.y >= y + h);
    };

    Square.prototype.intersectingRect = function(s) {
      var h, rbx, rby, w, x, y, _ref;

      _ref = s.normalizedBoundary(), x = _ref.x, y = _ref.y, w = _ref.w, h = _ref.h;
      rbx = x + w;
      rby = y + h;
      x = x < this.x ? this.x : x;
      y = y < this.y ? this.y : y;
      w = rbx > this.x + this.w ? this.x + this.w - x : rbx - x;
      h = rby > this.y + this.h ? this.y + this.h - y : rby - y;
      return [x, y, w, h];
    };

    Square.prototype.intersectionPoints = function(x, y, w, h) {
      return {
        fcs: this.x,
        fcw: x - this.x,
        mcs: x,
        mcw: w,
        lcs: x + w,
        lcw: this.x + this.w - (x + w),
        frs: this.y,
        frh: y - this.y,
        mrs: y,
        mrh: h,
        lrs: y + h,
        lrh: this.y + this.h - (y + h)
      };
    };

    Square.prototype.rectSplits = function(p) {
      return {
        nw: [p.fcs, p.frs, p.fcw, p.frh],
        w: [p.fcs, p.mrs, p.fcw, p.mrh],
        sw: [p.fcs, p.lrs, p.fcw, p.lrh],
        n: [p.mcs, p.frs, p.mcw, p.frh],
        s: [p.mcs, p.lrs, p.mcw, p.lrh],
        ne: [p.lcs, p.frs, p.lcw, p.frh],
        e: [p.lcs, p.mrs, p.lcw, p.mrh],
        se: [p.lcs, p.lrs, p.lcw, p.lrh]
      };
    };

    Square.prototype.updateIntersections = function(s) {
      var d, h, newSquare, ns, splits, updateSquare, v, w, x, y, _, _ref, _results,
        _this = this;

      if (!this.IsColliding(s)) {
        log('collistion not happening');
        this.RemoveSplits();
        return;
      }
      _ref = this.intersectingRect(s), x = _ref[0], y = _ref[1], w = _ref[2], h = _ref[3];
      ns = s.normalizedBoundary();
      if (ns.x !== x || ns.y !== y || ns.w !== w || ns.h !== h) {
        log(' ----- out of boundery ', this.id);
        squares.ProcessColliding(s);
      }
      splits = this.rectSplits(this.intersectionPoints(x, y, w, h));
      newSquare = function(xx, yy, ww, hh) {
        if (hh === 0 || ww === 0) {
          return null;
        }
        return new Square(xx, yy, ww, hh);
      };
      updateSquare = function(d, v) {
        var _ref1;

        log("" + ((_ref1 = _this.splits[d]) != null ? _ref1.id : void 0), v);
        if (!_this.splits[d]) {
          _this.splits[d] = newSquare.apply(null, v);
        }
        if (!_this.splits[d]) {
          return;
        }
        _this.splits[d].x = v[0];
        _this.splits[d].y = v[1];
        _this.splits[d].w = v[2];
        _this.splits[d].h = v[3];
        return _this.splits[d].updateDiv();
      };
      log("- spilitting " + this.id + " to " + (((function() {
        var _ref1, _results;

        _ref1 = this.splits;
        _results = [];
        for (_ in _ref1) {
          v = _ref1[_];
          _results.push(v != null ? v.id : void 0);
        }
        return _results;
      }).call(this)).join(',')));
      _results = [];
      for (d in splits) {
        v = splits[d];
        _results.push(updateSquare(d, v));
      }
      return _results;
    };

    Square.prototype.SplitWith = function(s) {
      var d, h, newSquare, splits, v, w, x, y, _ref, _ref1;

      if (!this.IsColliding(s)) {
        log('SplitWith: no collision');
        this.RemoveSplits();
        return;
      }
      if (!this.Masking) {
        log('div ', this, ' not visible');
        return;
      }
      _ref = this.intersectingRect(s), x = _ref[0], y = _ref[1], w = _ref[2], h = _ref[3];
      newSquare = function(xx, yy, ww, hh) {
        if (x === xx && y === yy && w === ww && h === hh) {
          return null;
        }
        if (hh === 0 || ww === 0) {
          return null;
        }
        return new Square(xx, yy, ww, hh);
      };
      this.RemoveOrig();
      log('splitting', this.id, this, '  with ', s);
      splits = this.rectSplits(this.intersectionPoints(x, y, w, h));
      log('SplitWith: ', s.div, x, y, w, h);
      for (d in splits) {
        v = splits[d];
        this.splits[d] = newSquare.apply(null, v);
      }
      _ref1 = this.splits;
      for (d in _ref1) {
        v = _ref1[d];
        log(d, (v ? v.div[0] : void 0));
      }
      s.rects.push(this);
      return this;
    };

    Square.prototype.RemoveOrig = function() {
      this.div.hide();
      return this.Masking = false;
    };

    Square.prototype.RemoveSplits = function() {
      var d, v, _ref, _results;

      log('removing splits');
      this.div.show();
      this.Masking = true;
      _ref = this.splits;
      _results = [];
      for (d in _ref) {
        v = _ref[d];
        if (v != null) {
          v.RemoveOrig();
        }
        if (v != null) {
          v.div.remove();
        }
        _results.push(v != null ? v.Masking = false : void 0);
      }
      return _results;
    };

    Square.prototype.StopDragging = function(e) {
      var d, n, _ref, _results;

      log('stopping, and pushing all squares', this.splits);
      _ref = this.splits;
      _results = [];
      for (d in _ref) {
        n = _ref[d];
        if (n && n.w !== 0 && n.h !== 0) {
          _results.push(squares.Push(n));
        } else {
          _results.push(n != null ? n.RemoveSplits() : void 0);
        }
      }
      return _results;
    };

    return Square;

  })();

  SelectionRect = (function() {
    function SelectionRect(x, y, w, h) {
      this.x = x;
      this.y = y;
      this.w = w;
      this.h = h;
      this.StopDragging = __bind(this.StopDragging, this);
      this.WhileDragging = __bind(this.WhileDragging, this);
      this.normalizedBoundary = __bind(this.normalizedBoundary, this);
      this.updateDiv = __bind(this.updateDiv, this);
      this.div = $('<div class="sel-rect">');
      this.rects = [];
      $('body').append(this.div);
      this.id = Id;
      Id += 1;
      this;
    }

    SelectionRect.prototype.updateDiv = function() {
      var ns;

      ns = this.normalizedBoundary();
      return this.div.css({
        top: ns.y + 'px',
        left: ns.x + 'px',
        width: ns.w + 'px',
        height: ns.h + 'px'
      });
    };

    SelectionRect.prototype.Changing = function() {
      return [false, false, true, true];
    };

    SelectionRect.prototype.normalizedBoundary = function() {
      var h, rbx, rby, w, x, y, _ref, _ref1, _ref2, _ref3;

      _ref = [this.x, this.y, this.w, this.h], x = _ref[0], y = _ref[1], w = _ref[2], h = _ref[3];
      _ref1 = [x + w, y + h], rbx = _ref1[0], rby = _ref1[1];
      if (rbx < x) {
        _ref2 = [rbx, x, -w], x = _ref2[0], rbx = _ref2[1], w = _ref2[2];
      }
      if (rby < y) {
        _ref3 = [rby, y, -h], y = _ref3[0], rby = _ref3[1], h = _ref3[2];
      }
      return {
        x: x,
        y: y,
        w: w,
        h: h
      };
    };

    SelectionRect.prototype.WhileDragging = function(e) {
      var r, _i, _len, _ref, _results;

      this.w = e.pageX - this.x;
      this.h = e.pageY - this.y;
      this.updateDiv();
      _ref = this.rects;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        _results.push(r.updateIntersections(this));
      }
      return _results;
    };

    SelectionRect.prototype.StopDragging = function(e) {
      var r, _i, _len, _ref;

      _ref = this.rects;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        r.StopDragging(e);
      }
      log('selectionrect drag stop');
      return console.groupEnd();
    };

    return SelectionRect;

  })();

  doStuff = function() {
    var $b, $d, Sels, h, s, sel, w, _ref;

    _ref = [window.document.width, window.document.height], w = _ref[0], h = _ref[1];
    s = new Square(0, 0, w, h);
    $b = $('body');
    log('dostuff', s.div.attr('id', 'fullmask'));
    $b.append(s.div);
    squares.Push(s);
    $d = $('body');
    Sels = [];
    sel = null;
    return $d.mousedown(function(e) {
      Dragging = true;
      console.group('drag');
      log('start dragging %O', squares.squares);
      sel = new SelectionRect(e.pageX, e.pageY, 1, 1);
      squares.ProcessColliding(sel);
      $d.mousemove(sel.WhileDragging);
      return $d.mouseup(function(e) {
        log('stopping drag');
        sel.StopDragging(e);
        Dragging = false;
        $d.off('mousemove');
        return $d.off('mouseup');
      });
    });
  };

}).call(this);
